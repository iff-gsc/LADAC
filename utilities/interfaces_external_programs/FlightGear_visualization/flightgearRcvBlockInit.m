function [msg_len,fg_dims,fg_type] = flightgearRcvBlockInit(...
    is_aerocntrl,is_engine,is_fuel,is_land,is_avionics,is_envir)
% flightgearRcvBlockInit init Simulink block "Receive from FlightGear"
%   This function is called from the initialization tab of the Simulink
%   block "Receive from FlightGear"
%   It dynamically toggles the number of block outputs.
%   The properties of the sent data by FlightGear can be found here:
%   https://github.com/FlightGear/flightgear/blob/next/src/Network/net_ctrls.hxx
% 
% Inputs:
%   is_aerocntrl        Are control surface outputs activated? (bool)
%   is_engine           Are engine outputs activated? (bool)
%   is_fuel             Are fuel outputs activated? (bool)
%   is_land             Are landing outputs activated? (bool)
%   is_avionics         Are avionics outputs activated? (bool)
%   is_envir            Are environment outputs activated? (bool)
% 
% Outputs:
%   msg_len             Message length of network byte stream (double)
%   fg_dims             Dimensions of sent signals as needed for the UDP
%                       Receive block (cell array)
%   fg_type             Types of sent signals as needed for the UDP Receive
%                       block (cell array)

% Disclamer:
%   SPDX-License-Identifier: GPL-2.0-only
% 
%   Copyright (C) 2022 Yannic Beyer
%   Copyright (C) 2022 TU Braunschweig, Institute of Flight Guidance
% *************************************************************************

fg_data = fgGetReceiveData();
    
msg_len = fgGetRcvMsgLen(fg_data);

fg_dims = fg_data(:,3);
fg_type = fg_data(:,2);

num_signals = length(fg_data);

for i = 1:num_signals
    if isequal(fg_data{i,4},'aerocntrl')
        blockInitToggleOutport( fg_data{i,1}, is_aerocntrl );
    elseif isequal(fg_data{i,4},'engine')
        blockInitToggleOutport( fg_data{i,1}, is_engine );
    elseif isequal(fg_data{i,4},'fuel')
        blockInitToggleOutport( fg_data{i,1}, is_fuel );
    elseif isequal(fg_data{i,4},'land')
        blockInitToggleOutport( fg_data{i,1}, is_land );
    elseif isequal(fg_data{i,4},'avionics')
        blockInitToggleOutport( fg_data{i,1}, is_avionics );
    elseif isequal(fg_data{i,4},'envir')
        blockInitToggleOutport( fg_data{i,1}, is_envir );
    end
end

end

function fg_data = fgGetReceiveData()

fg_max_engines  = 4;
fg_max_tanks    = 8;

fg_data = {...
    'version',          'uint32', 1, 0; ...
    
    'padding1',         'uint32', 1, 0; ...
    
    % aero controls
    'aileron',          'double', 1, 'aerocntrl'; ...
    'elevator',         'double', 1, 'aerocntrl'; ...
    'rudder',           'double', 1, 'aerocntrl'; ...
    'aileron_trim',     'double', 1, 'aerocntrl';...
    'elevator_trim',    'double', 1, 'aerocntrl'; ...
    'rudder_trim',      'double', 1, 'aerocntrl'; ...
    'flaps',            'double', 1, 'aerocntrl'; ...
    'spoilers',         'double', 1, 'aerocntrl'; ...
    'speedbrake',       'double', 1, 'aerocntrl'; ...
    
    % aero control faults
    'flaps_power',      'uint32', 1, 'aerocntrl'; ...
    'flap_motor_ok',    'uint32', 1, 'aerocntrl'; ...
    
    % engine controls
    'num_engines',      'uint32', 1,                'engine'; ...
    'master_bat',       'uint32', fg_max_engines,	'engine'; ...
    'master_alt',       'uint32', fg_max_engines,	'engine'; ...
    'magnetos',         'uint32', fg_max_engines,	'engine'; ...
    'starter_power',    'uint32', fg_max_engines,	'engine'; ...
    
    'padding2',         'uint32', 1,                0; ...
    
    'throttle',         'double', fg_max_engines,	'engine'; ...
    'mixture',          'double', fg_max_engines,	'engine'; ...
    'condition',        'double', fg_max_engines,	'engine'; ...
    'fuel_pump_power',  'uint32', fg_max_engines,	'engine'; ...
    'prop_advance',     'double', fg_max_engines,	'engine'; ...
    'feed_tank',        'uint32', 4,                'engine'; ...
    'reverse',          'uint32', 4,                'engine'; ...
    
    % engine faults
    'engine_ok',        'uint32', fg_max_engines,	'engine'; ...
    'mag_left_ok',      'uint32', fg_max_engines,	'engine'; ...
    'mag_right_ok',     'uint32', fg_max_engines,	'engine'; ...
    'spark_plugs_ok',   'uint32', fg_max_engines,	'engine'; ...
    'oil_press_status', 'uint32', fg_max_engines,	'engine'; ...
    'fuel_pump_ok',     'uint32', fg_max_engines,	'engine'; ...
    
    % fuel management
    'num_tanks',        'uint32', 1,                'fuel'; ...
    'fuel_selector',    'uint32', fg_max_tanks,     'fuel'; ...
    'xfer_pump',        'uint32', 5,                'fuel'; ...
    'cross_feed',       'uint32', 1,                'fuel'; ...
    
    'padding3',         'uint32', 1,                0; ...
    
    % brake controls
    'brake_left',           'double', 1,	'land'; ...
    'brake_right',          'double', 1,	'land'; ...
    'copilot_brake_left',   'double', 1,	'land'; ...
    'copilot_brake_right',  'double', 1,	'land'; ...
    'brake_parking',        'double', 1,	'land'; ...
    
    % landing gear
    'gear_handle',      'uint32', 1, 'land'; ...
    
    % switches
    'master_avionics',  'uint32', 1, 'avionics'; ...
    
    % nav and comm
    'comm_1',   'double', 1, 'avionics'; ...
    'comm_2',   'double', 1, 'avionics'; ...
    'nav_1',    'double', 1, 'avionics'; ...
    'nav_2',    'double', 1, 'avionics'; ...
    
    % wind and turbulance
    'wind_speed_kt',    'double', 1, 'envir'; ...
    'wind_dir_deg',     'double', 1, 'envir'; ...
    'turbulence_norm',  'double', 1, 'envir'; ...
    
    % temp and pressure
    'temp_c',       'double', 1, 'envir'; ...
    'press_inhg',   'double', 1, 'envir'; ...
    
    % other information about environment
    'hground',      'double', 1, 'envir'; ...
    'magvar',       'double', 1, 'envir'; ...
    
    % hazards
    'icing',        'uint32', 1, 'envir'; ...
    
    % simulation control
    'speedup',      'uint32', 1, 0; ...
    'freeze',       'uint32', 1, 0; ...
    
    'reserved',     'uint32', 25, 0; ...
    };
end

function msg_len = fgGetRcvMsgLen(fg_data)
msg_len = 0;
for i = 1:size(fg_data,1)
    if isequal(fg_data{i,2},'double')
        msg_len = msg_len + 8*fg_data{i,3};
    elseif isequal(fg_data{i,2},'uint32')
        msg_len = msg_len + 4*fg_data{i,3};
    end
end
end
